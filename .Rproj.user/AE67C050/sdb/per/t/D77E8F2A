{
    "contents" : "#-------------------#\n# Utility functions #\n#-------------------#\n\n# Internal functions that should not be exported\n\n# Index\n# Lookup - 01: lnInterp\n# Lookup - 02: addEllipse\n# Lookup - 03: pvt_plot_options\n\n# Lookup - 01\nlnInterp = function(x,yPts,xPts) {\n  # Purpose:\n  # Calculates the linear interpolation for a y-axis point that\n  # lies on the line between given a pair of x-axis and y-axis\n  # points.\n  # Arguments:\n  # x    - The x-axis point that corresponds to the desired y-axis\n  #        point\n  # yPts - The pair of y-axis points that the point lies between\n  # xPts - The pair of x-axis points that the point lies between\n  # Returns:\n  # The predicted y-axis point\n\n  # Determine\n  b = diff(yPts)/diff(xPts)\n  y = yPts[1] + b*(x-xPts[1])\n\n  return( y )\n}\n\n# Lookup - 02\naddEllipse = function(a, b, Xc, Yc, k = 0, deg = T, ... ) {\n  # Purpose:\n  # Draws an ellipse on an already existing plot.\n  # Arguments:\n  # a  - the length of the x-axis vertice of the ellipse\n  # b  - the length of the y-axis vertice of the ellipse\n  # k  - the angle between the x-axis in the major vertice\n  #      for the ellipse\n  # Xc - the center on the x-axis for the ellipse\n  # Yc - the center on the y-axis for the ellipse\n\n  if (deg) k = k * (pi/180) # Convert to radians\n\n  t = seq(0,2*pi,length=100)\n\n  x = Xc + a * cos(t) * cos(k) - b * sin(t) * sin(k)\n  y = Yc + b * sin(t) * cos(k) + a * cos(t) * sin(k)\n  polygon(x,y,...)\n\n}\n\npvt_plot_options = function( plt, dmn, xv ) {\n  # Purpose:\n  #\n  # Arguments:\n  # plt -\n  # dmn -\n  # xv  -\n  # Returns:\n  # An updated version of the list plt.\n\n  # If the y-axis values are stored in a matrix\n  if ( length( dmn ) > 0 ) {\n\n    # Extract the pch options\n    if ( length( plt$pch ) == 0 ) {\n      plt$pch = matrix( as.character(1:dmn[1]), dmn[1], dmn[2] )\n    } else {\n      if ( length( dim( plt$pch ) ) == 0 ) {\n        plt$pch = matrix( plt$pch, dmn[1], dmn[2] )\n      }\n    }\n\n    # Extract the col options\n    if ( length( plt$col ) == 0 ) {\n      plt$col = matrix( 'black', dmn[1], dmn[2] )\n    } else {\n      if ( length( dim( plt$col ) ) == 0 ) {\n        plt$col = matrix( plt$col, dmn[1], dmn[2] )\n      }\n    }\n\n    # Extract the bg options\n    if ( length( plt$bg ) == 0 ) {\n      plt$bg = matrix( 'white', dmn[1], dmn[2] )\n    } else {\n      if ( length( dim( plt$bg ) ) == 0 ) {\n        plt$bg = matrix( plt$bg, dmn[1], dmn[2] )\n      }\n    }\n\n  }\n\n  # If the y-axis values are stored in a vector\n  if ( length( dmn ) == 0 ) {\n\n    # Extract the pch options\n    if ( length( plt$pch ) == 0 ) {\n      plt$pch = as.character(1:length(xv$P))\n    } else {\n      plt$pch = plt$pch\n    }\n\n    # Extract the col options\n    if ( length( plt$col ) == 0 ) {\n      plt$col = 'black'\n    } else {\n      plt$col = plt$col\n    }\n\n    # Extract the bg options\n    if ( length( plt$bg ) == 0 ) {\n      plt$bg = 'white'\n    } else {\n      plt$bg = plt$bg\n    }\n\n  }\n\n  return( plt )\n}\n",
    "created" : 1470865382283.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3484655763",
    "id" : "D77E8F2A",
    "lastKnownWriteTime" : 1478736358,
    "path" : "F:/Stuff/Kevin's Stuff/Postdoc/R packages/rtplots/R/util.R",
    "project_path" : "R/util.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}